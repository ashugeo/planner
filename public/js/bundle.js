/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const settings = {\n    spreadOnDrag: false,\n    multipleEventsPerDay: false,\n    eventsColors: ['#1d6c99', '#c2761f', '#109210', '#8a2e82', '#c56a94']\n}\n\n$(document).ready(() => {\n    const calendar = buildCalendar();\n\n    $('.calendar-wrap .content').html(calendar);\n    $('.calendars-wrap .calendar .content').html(calendar);\n\n    addEvents(['Workout', 'Tennis', 'Jogging']);\n});\n\nlet calendarID = 0;\n\n// Add new calendar\n$(document).on('click', '.calendars-wrap .add', () => {\n    console.log('wow');\n    const calendar = `<div class=\"calendar sortable\" data-id=\"${++calendarID}\">\n        <div class=\"tools\">\n            <i data-tool=\"toggle\" class=\"far fa-eye\"></i>\n            <i data-tool=\"sort\">⋮⋮</i>\n            <i data-tool=\"duplicate\" class=\"far fa-clone\"></i>\n            <i data-tool=\"delete\" class=\"far fa-trash-alt\"></i>\n        </div>\n        <div class=\"content\">${ buildCalendar() }</div>\n        <p><span contenteditable spellcheck=\"false\">Calendar ${$('.calendars-wrap .calendar').length + 1}</span></p>\n    </div>`;\n\n    $('.calendars-wrap .calendars').append(calendar);\n    const $calendar = $('.calendars-wrap .calendar:last-child');\n\n    selectCalendar($calendar);\n});\n\n$(document).on('click', '.calendars-wrap [data-tool=\"toggle\"]', e => {\n    const $calendar = $(e.target).closest('.calendar')\n    $calendar.toggleClass('hidden');\n    if ($calendar.hasClass('selected')) {\n        const $calendarToSelect = $calendar.nextAll(':not(.hidden)').eq(0).length ? $calendar.nextAll(':not(.hidden)').eq(0) : $calendar.prevAll(':not(.hidden)').length ? $calendar.prevAll(':not(.hidden)') : null;\n        if ($calendarToSelect) selectCalendar($calendarToSelect);\n    }\n});\n\n// Duplicate calendar\n$(document).on('click', '.calendar .tools [data-tool=\"duplicate\"]', e => {\n    const $calendar = $(e.target).closest('.calendar')\n    const $new = $calendar.clone();\n\n    // Remove selected class and rename with 'copy'\n    $new.removeClass('selected');\n    $new.find('p span').append(' copy');\n\n    // Reindex new calendar\n    $new.attr('data-id', ++calendarID);\n\n    // Clone calendar\n    $calendar.after($new);\n\n    // Unselect any selection\n    window.getSelection().removeAllRanges();\n});\n\n// Delete calendar\n$(document).on('click', '.calendar .tools [data-tool=\"delete\"]', e => {\n    const $calendar = $(e.target).closest('.calendar');\n    if ($calendar.hasClass('selected')) {\n        const $calendarToSelect = $calendar.nextAll(':not(.hidden)').eq(0).length ? $calendar.nextAll(':not(.hidden)').eq(0) : $calendar.prevAll(':not(.hidden)').length ? $calendar.prevAll(':not(.hidden)').eq(0) : null;\n        if ($calendarToSelect) selectCalendar($calendarToSelect);\n    }\n    $calendar.remove();\n});\n\n// Add new event\n$(document).on('click', '.events-wrap .add', e => {\n    const type = parseInt($('.events-wrap ul li').length);\n    const event = `<li data-type=\"${type}\" class=\"sortable\" style=\"background-color: ${settings.eventsColors[type]}\"><span class=\"title\" contenteditable spellcheck=\"false\"></span></li>`;\n\n    const $ul = $(e.target).closest('.events-wrap').find('ul');\n    $ul.append(event);\n\n    // Select new event and focus span\n    $ul.find('li.selected').removeClass('selected');\n    $ul.find('li:last-child').addClass('selected');\n    $ul.find('li:last-child span').focus();\n});\n\n$(document).on('change', '#start, #end', () => {\n    const calendar = buildCalendar();\n\n    $('.calendar-wrap .content').html(calendar);\n    $('.calendars-wrap .calendar .content').html(calendar);\n});\n\n$(document).on('mousedown', '.events-wrap ul li', e => {\n    $('.events-wrap ul li.selected').removeClass('selected');\n    $(e.target).closest('li').addClass('selected');\n});\n\n// Switch calendar\n$(document).on('mousedown', '.calendars-wrap .calendar .content', e => {\n    const $calendar = $(e.target).closest('.calendar');\n    selectCalendar($calendar);\n});\n\nfunction selectCalendar($calendar) {\n    $('.calendars-wrap .calendar.selected').removeClass('selected');\n    $calendar.addClass('selected');\n\n    // Update ID\n    $('.calendar-wrap .content').attr('data-id', $calendar.attr('data-id'));\n\n    // Update title\n    $('.calendar-wrap h2').html($calendar.find('p span').html());\n\n    // Update main calendar\n    $('.calendar-wrap .content').html($calendar.find('.content').html());\n\n    // Unselect any selection\n    window.getSelection().removeAllRanges();\n\n    highlightSelection();\n}\n\n// // Click on contenteditable: select all\n// $(document).on('click', '[contenteditable]', e => {\n//     document.execCommand('selectAll', false, null);\n// });\n\n// // Tab to contenteditable: select all\n// $(document).on('keyup', '[contenteditable]', e => {\n//     if (e.which === 9) document.execCommand('selectAll', false, null);\n// });\n\n// Enter key in contenteditable: prevent new line and blur\n$(document).on('keypress', '[contenteditable]', e => {\n    if (e.which === 13) {\n        $(e.target).blur();\n        return false;\n    }\n});\n\n// Rename calendar in sidebar\n$(document).on('input', '.calendars-wrap p span', e => {\n    if ($(e.target).closest('.calendar').hasClass('selected')) {\n        const val = $(e.target).text();\n        $('.calendar-wrap h2').text(val);\n    }\n});\n\n// Rename selected calendar\n$(document).on('input', '.calendar-wrap h2', e => {\n    const val = $(e.target).text();\n    $('.calendars-wrap .calendar.selected p span').text(val);\n});\n\n// Rename event\n$(document).on('input', '.events-wrap ul span', e => {\n    const $el = $(e.target);\n    const val = $el.text();\n    const type = $el.closest('li').attr('data-type');\n\n    $(`.event[data-type=\"${type}\"] span`).text(val);\n});\n\nlet eventID = 0;\nlet selectedDays = []; \n\n$(document).on('mousedown', '.calendar-wrap .day', e => {\n    const $day = $(e.target).closest('.day');\n    const date = $day.attr('data-date');\n\n    if (e.metaKey && !e.shiftKey && !e.altKey) {\n        $('.selected-first').removeClass('selected-first');\n        $day.addClass('selected-first');\n\n        if (selectedDays.some(d => d.getTime() === new Date(date).getTime())) {\n            selectedDays = selectedDays.filter(d => d.getTime() !== new Date(date).getTime());\n        } else {\n            selectedDays.push(new Date(date));\n        }\n    } else if (e.shiftKey) {\n        const $selectedFirst = $('.calendar-wrap .day.selected-first').length ? $('.calendar-wrap .day.selected-first') : $('.calendar-wrap .day.selected').eq(0);\n        $selectedFirst.addClass('selected-first');\n\n        const _selectedDays = [new Date($selectedFirst.attr('data-date')), new Date(date)];\n\n        const lowestWeekDay = Math.min(..._selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n        const highestWeekDay = Math.max(..._selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n\n        const [start, end] = [new Date($selectedFirst.attr('data-date')), new Date($day.attr('data-date'))].sort((a, b) => a > b ? 1 : -1);\n\n        start.setDate(start.getDate() - ((start.getDay() === 0 ? 7 : start.getDay()) - lowestWeekDay));\n        end.setDate(end.getDate() + (highestWeekDay - (end.getDay() === 0 ? 7 : end.getDay())));\n        \n        let days = [start];\n\n        // Build array of all days from firstDay to end\n        while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n        // Filter out days out of rectangle\n        days = days.filter(d => (d.getDay() === 0 ? 7 : d.getDay()) >= lowestWeekDay && (d.getDay() === 0 ? 7 : d.getDay()) <= highestWeekDay);\n\n        if (e.metaKey) selectedDays.push(...days);\n        else selectedDays = days;\n    } else if (e.altKey) {\n        const $selectedFirst = $('.calendar-wrap .day.selected-first').length ? $('.calendar-wrap .day.selected-first') : $('.calendar-wrap .day.selected').eq(0);\n        $selectedFirst.addClass('selected-first');\n\n        const [start, end] = [new Date($selectedFirst.attr('data-date')), new Date($day.attr('data-date'))].sort((a, b) => a > b ? 1 : -1);\n\n        const days = [start];\n    \n        // Build array of all days from firstDay to end\n        while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n        if (e.metaKey) selectedDays.push(...days);\n        else selectedDays = days;\n    } else {\n        if (selectedDays.length && selectedDays[0].getTime() === new Date(date).getTime()) {\n            selectedDays = []; \n        } else {\n            selectedDays = [new Date(date)]; \n            $('.calendar-wrap .day.selected-first').removeClass('selected-first');\n            $('.calendar-wrap .day.selected-last').removeClass('selected-last');\n            $day.addClass('selected-first selected-last');\n        }\n    }\n    highlightSelection();\n});\n\n$(document).on('keydown', e => {\n    const ctrlOrMeta = e.metaKey || e.ctrlKey;\n\n    if ([37, 38, 39, 40].includes(e.which)) moveSelection(e); // Arrow keys: move selection\n    else if (e.which === 8) emptySelection(); // Backspace\n    else if (ctrlOrMeta && e.which === 65) selectAll(); // A\n    else if (ctrlOrMeta && e.which === 67) copySelection(); // C\n    else if (ctrlOrMeta && e.which === 88) cutSelection(); // X\n    else if (ctrlOrMeta && e.which === 86) pasteSelection(); // V\n    else if (ctrlOrMeta && e.which === 90) { // Z\n        e.preventDefault();\n        if (e.shiftKey) redo();\n        else undo();\n    }\n});\n\nfunction moveSelection(e) {\n    // Ignore if no selection\n    const $selected = $('.calendar-wrap .day.selected-last');\n    if (!$selected.length) return;\n\n    let target;\n    const date = new Date($selected.attr('data-date'));\n\n    if (e.which === 37) {\n        if (e.metaKey && e.shiftKey) {\n            // Meta + shift + left: beggining of week\n            target = new Date(date.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() + 1)));\n        } else {\n            // Left: one day before\n            target = new Date(date.setDate(date.getDate() - 1));\n    \n            // Prevent changing week with shift key\n            if (target.getDay() === 0 && e.shiftKey) return;\n        }\n    } else if (e.which === 38) {\n        // Up: one week before\n        target = new Date(date.setDate(date.getDate() - 7));\n    } else if (e.which === 39) {\n        if (e.metaKey && e.shiftKey) {\n            // Meta + shift + right: end of week\n            target = new Date(date.setDate(date.getDate() + 7 - date.getDay()));\n        } else {\n            // Right: one day after\n            target = new Date(date.setDate(date.getDate() + 1));\n    \n            // Prevent changing week with shift key\n            if (target.getDay() === 1 && e.shiftKey) return;\n        }\n    } else if (e.which === 40) {\n        // Down: one week after\n        target = new Date(date.setDate(date.getDate() + 7));\n    }\n\n    if (e.shiftKey) {\n        const $selectedFirst = $('.selected-first');\n        $('.selected-last').removeClass('selected-last');\n\n        const targetDate = `${target.getFullYear()}-${`${target.getMonth() + 1}`.padStart(2, '0')}-${`${target.getDate()}`.padStart(2, '0')}`;\n        const $target = $(`.calendar-wrap .day[data-date=\"${targetDate}\"]`);\n        $target.addClass('selected-last');\n\n        selectedDays = [new Date($selectedFirst.attr('data-date')), new Date(date)];\n\n        const lowestWeekDay = Math.min(...selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n        const highestWeekDay = Math.max(...selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n\n        const [start, end] = [new Date($selectedFirst.attr('data-date')), new Date(target)].sort((a, b) => a > b ? 1 : -1);\n\n        start.setDate(start.getDate() - ((start.getDay() === 0 ? 7 : start.getDay()) - lowestWeekDay));\n        end.setDate(end.getDate() + (highestWeekDay - (end.getDay() === 0 ? 7 : end.getDay())));\n        \n        let days = [start];\n\n        // Build array of all days from firstDay to end\n        while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n        // Filter out days out of rectangle\n        days = days.filter(d => (d.getDay() === 0 ? 7 : d.getDay()) >= lowestWeekDay && (d.getDay() === 0 ? 7 : d.getDay()) <= highestWeekDay);\n\n        selectedDays = days;\n    } else if (e.altKey) {\n        const $selectedFirst = $('.selected-first');\n        $('.selected-last').removeClass('selected-last');\n\n        const targetDate = `${target.getFullYear()}-${`${target.getMonth() + 1}`.padStart(2, '0')}-${`${target.getDate()}`.padStart(2, '0')}`;\n        const $target = $(`.calendar-wrap .day[data-date=\"${targetDate}\"]`);\n        $target.addClass('selected-last');\n\n        const [start, end] = [new Date($selectedFirst.attr('data-date')), new Date(target)].sort((a, b) => a > b ? 1 : -1);\n\n        const days = [start];\n    \n        // Build array of all days from firstDay to end\n        while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n        selectedDays = days;\n    } else {\n        const date = `${target.getFullYear()}-${`${target.getMonth() + 1}`.padStart(2, '0')}-${`${target.getDate()}`.padStart(2, '0')}`;\n        const $target = $(`.calendar-wrap .day[data-date=\"${date}\"]`);\n        $('.selected-first').removeClass('selected-first');\n        $('.selected-last').removeClass('selected-last');\n        $target.addClass('selected-first selected-last');\n        \n        selectedDays = [target];\n    }\n\n    highlightSelection();\n}\n\nfunction highlightSelection() {\n    $('.day.selected').removeClass('selected');\n\n    for (const day of selectedDays) {\n        const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n        const $el = $(`.day[data-date=\"${date}\"]`);\n        $el.addClass('selected');\n        $el.removeClass('no-top no-right no-bottom no-left');\n        \n        const dayBeforeSelected = selectedDays.some(d => d.getTime() === new Date(new Date(day).setDate(day.getDate() - 1)).getTime());\n        const dayAfterSelected = selectedDays.some(d => d.getTime() === new Date(new Date(day).setDate(day.getDate() + 1)).getTime());\n        const dayWeekBeforeSelected = selectedDays.some(d => d.getTime() === new Date(new Date(day).setDate(day.getDate() - 7)).getTime());\n        const dayWeekAfterSelected = selectedDays.some(d => d.getTime() === new Date(new Date(day).setDate(day.getDate() + 7)).getTime());\n\n        if (dayWeekBeforeSelected) $el.addClass('no-top');\n        if (dayAfterSelected && day.getDay() !== 0) $el.addClass('no-right');\n        if (dayWeekAfterSelected) $el.addClass('no-bottom');\n        if (dayBeforeSelected && day.getDay() !== 1) $el.addClass('no-left');\n    }\n}\n\nfunction emptySelection() {\n    const action = {\n        type: 'removeEvents',\n        events: []\n    };\n\n    for (day of selectedDays) {\n        const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n        \n        const $event = $(`.calendar-wrap .day[data-date=\"${date}\"] .event`);\n        $event.remove();\n\n        const event = {\n            id: eventID++,\n            calendar: parseInt($('.calendars-wrap .calendar.selected').attr('data-id')),\n            type: $event.attr('data-type'),\n            title: $event.find('.title').text(),\n            color: $event.css('background-color'),\n            start: date,\n            end: date\n        };\n\n        action.events.push(event);\n\n        $(`.calendars-wrap .calendar.selected .day[data-date=\"${date}\"] .event`).remove();\n    }\n\n    pushAction(action);\n}\n\nfunction selectAll() {\n    const start = new Date($('#start').val());\n    const end = new Date($('#end').val());\n\n    let days = [start];\n\n    // Build array of all days from start to end\n    while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n    selectedDays = days;\n\n    highlightSelection();\n}\n\nlet clipboard = [];\n\nfunction copySelection() {\n    clipboard = [];\n\n    const firstDayInSelection = new Date(Math.min(...selectedDays));\n    const lastDayInSelection = new Date(Math.max(...selectedDays));\n    const lowestWeekDay = Math.min(...selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n    const highestWeekDay = Math.max(...selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n\n    const [start, end] = [firstDayInSelection, lastDayInSelection];\n\n    start.setDate(start.getDate() - ((start.getDay() === 0 ? 7 : start.getDay()) - lowestWeekDay));\n    end.setDate(end.getDate() + (highestWeekDay - (end.getDay() === 0 ? 7 : end.getDay())));\n\n    let days = [start];\n\n    // Build array of all days from firstDay to end\n    while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n    // Filter out days out of rectangle\n    days = days.filter(d => (d.getDay() === 0 ? 7 : d.getDay()) >= lowestWeekDay && (d.getDay() === 0 ? 7 : d.getDay()) <= highestWeekDay);\n\n    const events = [];\n    for (const day of days) {\n        // Ignore unselected days\n        if (!selectedDays.some(d => d.getTime() === day.getTime())) {\n            events.push(null);\n            continue;\n        };\n\n        const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n        const $events = $(`.calendar-wrap .day[data-date=\"${date}\"] .event`);\n\n        if ($events.length) {\n            $events.each((id, el) => {\n                const $el = $(el);\n    \n                const event = {\n                    // id: \n                    type: $el.attr('data-type'),\n                    title: $el.find('.title').text(),\n                    color: $el.css('background-color'),\n                    // start: $el.attr('data-start'),\n                    // end: $el.attr('data-end')\n                }\n    \n                events.push(event);\n            });\n        } else {\n            events.push(null);\n        }\n    }\n\n    while (events.length) clipboard.push(events.splice(0, highestWeekDay - lowestWeekDay + 1));\n}\n\nfunction cutSelection() {\n    copySelection();\n    emptySelection();\n}\n\nfunction pasteSelection() {\n    const $selected = $('.calendar-wrap .day.selected-first');\n    const date = new Date($selected.attr('data-date'));\n\n    for (let j = 0; j < clipboard.length; j += 1) {\n        for (let i = 0; i < clipboard[0].length; i += 1) {\n            const _event = clipboard[j][i];\n            if (!_event) continue;\n\n            const target = new Date(new Date(date).setDate(date.getDate() + j * 7 + i));\n            const _date = `${target.getFullYear()}-${`${target.getMonth() + 1}`.padStart(2, '0')}-${`${target.getDate()}`.padStart(2, '0')}`;\n\n            const event = { ..._event };\n            event.start = _date;\n            event.end = _date;\n    \n            buildEvent(event);\n        }\n    }\n}\n\n$(document).on('mouseenter', '.calendar-wrap .day', e => {\n    if (selectedDays.length) dragSelect(e);\n    // if (!event.title || !settings.spreadOnDrag) return;\n    // event.end = $(e.target).closest('.day').attr('data-date');\n\n    // buildEvent();\n});\n\n$(document).on('mouseup', '.day', e => {\n    // event = { id: event.id + 1 };\n});\n\n$(document).on('click', '.events-wrap ul li', e => {\n    const $event = $(e.target).closest('li');\n    const type = $event.attr('data-type');\n\n    const selectedDaysEvents = selectedDays.map(d => {\n        const date = `${d.getFullYear()}-${`${d.getMonth() + 1}`.padStart(2, '0')}-${`${d.getDate()}`.padStart(2, '0')}`;\n        return $(`.calendar-wrap .day[data-date=\"${date}\"] .event`).attr('data-type');\n    });\n\n    if (selectedDaysEvents.every(e => e === type)) {\n        // If same type, simply remove event and don't recreate one (toggle-like behavior)\n        for (day of selectedDays) {\n            const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n            \n            const $events = $(`.calendars-wrap .calendar.selected .day[data-date=\"${date}\"] .event, .calendar-wrap .day[data-date=\"${date}\"] .event`);\n            $events.remove();\n\n            // const action = {\n            //     type: 'remove',\n\n            // }\n        }\n    } else {\n        const action = {\n            type: 'addEvents',\n            events: []\n        };\n\n        for (day of selectedDays) {\n            const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n            \n            const $events = $(`.calendars-wrap .calendar.selected .day[data-date=\"${date}\"] .event, .calendar-wrap .day[data-date=\"${date}\"] .event`);\n            $events.remove();\n                \n            const $day = $(`.calendar-wrap .day[data-date=\"${date}\"]`);\n            \n            const event = {\n                id: eventID++,\n                calendar: parseInt($('.calendars-wrap .calendar.selected').attr('data-id')),\n                type: type,\n                title: $event.find('.title').text(),\n                color: $event.css('background-color'),\n                start: $day.attr('data-date'),\n                end: $day.attr('data-date')\n            };\n\n            action.events.push(event);\n    \n            buildEvent(event);\n        }\n\n        pushAction(action);\n    }\n});\nfunction buildEvent(event) {\n    const [start, end] = [new Date(event.start), new Date(event.end)].sort((a, b) => a > b ? 1 : -1);\n\n    const date = `${start.getFullYear()}-${`${start.getMonth() + 1}`.padStart(2, '0')}-${`${start.getDate()}`.padStart(2, '0')}`;\n\n    const days = [start, end];\n\n    const $el = $(`.calendar[data-id=\"${event.calendar}\"] .day[data-date=\"${date}\"]`);\n\n    // Add event\n    let classname = ' start end';\n    $el.append(`<div data-id=\"${event.id}\" data-type=\"${event.type}\" class=\"event${classname}\" style=\"background-color: ${event.color}\">${classname.includes('start') ? `<span class=\"title\">${event.title}</span>` : ''}</div>`);\n}\n\nfunction buildCalendar() {\n    const start = new Date(new Date($('#start').val()).setHours(0));\n    const end = new Date(new Date($('#end').val()).setHours(0));\n\n    if (end < start) return;\n\n    // Find first day (first Monday)\n    const firstDay = new Date(new Date(start).setDate(start.getDate() - start.getDay() + (start.getDay() === 0 ? -6 : 1)));\n\n    const days = [firstDay];\n    \n    // Build array of all days from firstDay to end\n    while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n    // Fill last week\n    while (days.length % 7 !== 0) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n\n    // Build HTML\n    let html = '<div>';\n    for (day of days) {\n        const date = `${day.getFullYear()}-${`${day.getMonth() + 1}`.padStart(2, '0')}-${`${day.getDate()}`.padStart(2, '0')}`;\n        day.setHours(0);\n        const classname = day < start || day > end ? ' out' : '';\n\n        html += `<div class=\"day${classname}\" data-date=\"${date}\"><span>${day.getDate()} ${day.toLocaleDateString('en-US', { month: 'short' })}</span></div>`;\n\n        if (day.getDay() === 0) html += '</div><div>';\n    }\n    html += '</div>';\n\n    return html;\n}\n\nlet $sortedEl;\nlet sortedPosition = {};\nlet sortedOrigin = {};\n\n$(document).on('mousedown', '.sortable i[data-tool=\"sort\"]', e => {\n    startSort(e);\n});\n\n$(document).on('mouseup', e => {\n    if ($sortedEl) stopSort(e);\n});\n\n$(document).on('mousemove', e => {\n    if ($sortedEl) sort(e);\n});\n\nfunction startSort(e) {\n    const $icon = $(e.target);\n    $sortedEl = $icon.closest('.sortable');\n    \n    // Ignore sort if only child\n    if ($sortedEl.is(':only-child')) return;\n\n    sortedPosition = $sortedEl.position();\n    \n    sortedOrigin = {\n        x: e.clientX,\n        y: e.clientY\n    };\n\n    $icon.css('cursor', 'grabbing');\n\n    $sortedEl.css('zIndex', '1');\n\n    const $parent = $sortedEl.parent();\n\n    $sortedEl.parent().css({\n        'width': $parent.outerWidth(),\n        'height': $parent.outerHeight()\n    });\n\n    $parent.children().each((id, el) => {\n        const $el = $(el);\n        $el.css({\n            'top': $el.position().top,\n            'left': $el.position().left,\n            'width': $el.outerWidth(),\n            'height': $el.outerHeight()\n        });\n    });\n\n    $parent.children().each((id, el) => {\n        $(el).css('position', 'absolute');\n    });\n}\n\nfunction sort(e) {\n    const deltaX = e.clientX - sortedOrigin.x;\n    const deltaY = e.clientY - sortedOrigin.y;\n\n    $sortedEl.css({\n        'top': Math.min(Math.max(sortedPosition.top + deltaY, $sortedEl.parent().offset().top), $sortedEl.parent().offset().top + $sortedEl.parent().outerHeight() - $sortedEl.outerHeight()),\n        // 'left': sortedPosition.left + deltaX\n    });\n\n    $sortedEl.nextAll().each((id, el) => {\n        const $el = $(el);\n        if ($sortedEl.position().top > $el.position().top - 30) {\n            $el.css('top', $el.position().top - $sortedEl.outerHeight(true));\n            $sortedEl.before($el);\n        }\n    });\n\n    $sortedEl.prevAll().each((id, el) => {\n        const $el = $(el);\n        if ($sortedEl.position().top < $el.position().top + 30) {\n            $sortedEl.after($el);\n            $el.css('top', $el.position().top + $sortedEl.outerHeight(true));\n        }\n    });\n}\n\nfunction stopSort(e) {\n    $sortedEl.css({\n        'cursor': '',\n        'zIndex': ''\n    });\n    \n    const $parent = $sortedEl.parent();\n\n    $sortedEl.parent().css({\n        'width': '',\n        'height': ''\n    });\n\n    $parent.children().each((id, el) => {\n        const $el = $(el);\n        $el.css({\n            'top': '',\n            'left': '',\n            'width': '',\n            'height': ''\n        });\n    });\n\n    $parent.children().each((id, el) => {\n        $(el).css('position', '');\n    });\n\n    $sortedEl = null;\n}\n\nfunction dragSelect(e) {\n    if (e.which !== 1) return;\n\n    const $day = $(e.target).closest('.day');\n    const date = $day.attr('data-date');\n\n    const $selectedFirst = $('.calendar-wrap .day.selected-first').length ? $('.calendar-wrap .day.selected-first') : $('.calendar-wrap .day.selected').eq(0);\n    $selectedFirst.addClass('selected-first');\n\n\n    let days = [];\n\n    if (e.metaKey) {\n        selectedDays.push(new Date(date));\n    } else {\n        const _selectedDays = [new Date($selectedFirst.attr('data-date')), new Date(date)];\n\n        const lowestWeekDay = Math.min(..._selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n        const highestWeekDay = Math.max(..._selectedDays.map(d => d.getDay()).map(w => w === 0 ? 7 : w));\n    \n        const [start, end] = [new Date($selectedFirst.attr('data-date')), new Date($day.attr('data-date'))].sort((a, b) => a > b ? 1 : -1);\n        \n        start.setDate(start.getDate() - ((start.getDay() === 0 ? 7 : start.getDay()) - lowestWeekDay));\n        end.setDate(end.getDate() + (highestWeekDay - (end.getDay() === 0 ? 7 : end.getDay())));\n        \n        days = [start];\n    \n        // Build array of all days from firstDay to end\n        while (days[days.length - 1] < end) days.push(new Date(new Date(days[days.length - 1].valueOf()).setDate(days[days.length - 1].getDate() + 1)));\n    \n        // Filter out days out of rectangle\n        if (!e.altKey) days = days.filter(d => (d.getDay() === 0 ? 7 : d.getDay()) >= lowestWeekDay && (d.getDay() === 0 ? 7 : d.getDay()) <= highestWeekDay);\n    }   \n\n    if (!$selectedFirst.hasClass('selected')) {\n        const date = $day.attr('data-date');\n        selectedDays = selectedDays.filter(d => d.getTime() !== new Date(date).getTime());\n    } else {\n        if (e.metaKey) selectedDays.push(...days);\n        else selectedDays = days;\n    }\n\n    highlightSelection();\n}\n\nfunction addEvents(array) {\n    for (const event of array) {\n        const $ul = $('.events-wrap ul');\n        const type = $ul.find('li').length;\n        const li = `<li data-type=\"${type}\" style=\"background-color: ${settings.eventsColors[type]}\" class=\"sortable${type === 0 ? ' selected' : ''}\">\n            <span class=\"title\" contenteditable>${event}</span>\n            <span class=\"tools\">\n                <i class=\"fas fa-caret-down\"></i>\n                <i data-tool=\"sort\">⋮⋮</i>\n            </span>\n        </li>`;\n        $ul.append(li);\n    }\n}\n\nconst actions = [];\nlet actionsIndex = 0;\n\nfunction pushAction(action) {\n    actions.length = actionsIndex;\n    actions.push(action);\n    actionsIndex += 1;\n}\n\nfunction undo() {\n    if (actionsIndex - 1 < 0) return;\n    actionsIndex -= 1;\n    const action = actions[actionsIndex];\n\n    if (action.type === 'addEvents') for (const event of action.events) removeEvent(event);\n    else if (action.type === 'removeEvents') for (const event of action.events) buildEvent(event);\n}\n\nfunction removeEvent(event) {\n    $(`.event[data-id=\"${event.id}\"]`).remove();\n}\n\nfunction redo() {\n    if (actionsIndex + 1 > actions.length) return;\n    const action = actions[actionsIndex];\n    if (action.type === 'addEvents') for (const event of action.events) buildEvent(event);\n    else if (action.type === 'removeEvents') for (const event of action.events) removeEvent(event);\n\n    actionsIndex += 1;\n}\n\n//# sourceURL=webpack:///./src/js/main.js?");

/***/ })

/******/ });